/**
  @grids
  ---------------------------------------------------------

  The app uses a simple grid system. It starts with
  a wrapper div that can have a classname of .grid-wrap
  or .gw for short.  Inside of that div, you'll nest
  your grid units.  These are divs with classname of
  either .grid or .g for short.

  To specify the responsive behavior of the grid you
  can add width classes.

  Example: Grid with responsive width classes

  <div class="gw">
    <div class="g sm-one-whole md-one-half  lg-one-third    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-half  lg-one-third    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-third lg-one-third    xl-one-twelfth">...</div>
    <div class="g sm-one-whole md-one-third lg-one-fifth    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-third lg-three-fifths xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-half  lg-one-fifth    xl-one-twelfth">...</div>
    <div class="g sm-one-whole md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="g sm-one-whole md-one-third lg-one-sixth    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
    <div class="g sm-one-half  md-one-half  lg-one-sixth    xl-one-twelfth">...</div>
  </div>

  For a grid wrap containing equally-sized grid units, like
  a gallery of thumbnails for instance, use the responsive ups
  classes. With these classes applied to the .grid-wrap/.gw,
  you won't need to specify widths on the individual grid units,
  just on the wrapper.

  Example: Grid with responsive ups classes
  <div class="gw two-up sm-three-up md-four-up lg-six-up">
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
    <div class="g">...</div>
  </div>

------------------------------------------------------ */

// Grid configuration
// -----------------------------------------------------
//
// Define the point at which grids no longer stack, but float
// You might use a $breakpoint__* variable from _vars.scss or
// any other value that works for you.
$grid__float-at: $breakpoint__xs;
//
// Define the width of the gutters between grid units
// You might use $unit from _vars.scss, or a relative value
// of $unit, like .5$unit for instance for small gutters.
$grid__gutter-width: $unit;
//
// Define the amount of space at the bottom of a grid unit
// when they are stacking (before they start to float)
// You might choose $unit again.
$grid__bottom-spacing-when-stacking: $unit;
//
// Define the amount of space at the bottom of a grid unit
// when they are floating. It's often a good idea to make
// this value equal to the gutter width.
$grid__bottom-spacing-when-floating: $grid__gutter-width;

// Grid Wrap
.grid-wrap,
.gw {
  @include clearfix();
  display: block;
  // Sometimes, ul are used for grid wraps
  list-style-type: none;
  margin-bottom: -1 * $grid__bottom-spacing-when-stacking;
  @include bp-at-least($grid__float-at) {
    margin: 0 0 -1 * $grid__bottom-spacing-when-floating -1 *
      $grid__gutter-width;
  }
}

// Grid
.grid,
.g {
  @include clearfix();
  min-height: 1px;
  position: relative;
  padding-bottom: $grid__bottom-spacing-when-stacking;
  display: block;
  width: 100%;
  @include bp-at-least($grid__float-at) {
    padding: 0 0 $grid__bottom-spacing-when-floating $grid__gutter-width;
    float: left;
  }
}

/* WIDTHS*/

$widths__number-of-divisions-at-breakpoint: (
  n: 12,
  xs: 0,
  sm: 12,
  md: 12,
  lg: 12,
  xl: 12,
  xxl: 12,
);

// 100% width classes:
// ------------------------------------------------------
// I would like all 100% width classes like .two-halves
// and .five-fifths. If you say false, you'll still get
// .one-whole classes because those are super useful
//
$widths__generate-all-100-percent-widths: true; // true or false

// Generate common denominator widths:
// ------------------------------------------------------
// I would like to keep all width classes, even if the % value is
// equal to another fraction like .four-eights or .two-sixths.
// Setting this to 'false' generates less code, but forces you
// to remember your fractions.
//
$widths__generate-common-denominator-widths: true; // true or false

// That's it - you're done
// ------------------------------------------------------
// NOTE: there's nothing else to edit after this line. All that
// follows are the functions/mixins that generate the code.

// ----------------------------------------------------
// Function to make easy-to-read class from number
// ----------------------------------------------------

// Define english for each integer
//
$english-by-number: (
  1: 'one',
  2: 'two',
  3: 'three',
  4: 'four',
  5: 'five',
  6: 'six',
  7: 'seven',
  8: 'eight',
  9: 'nine',
  10: 'ten',
  11: 'eleven',
  12: 'twelve',
);

// Define english 'nth' for the denominators of
// our fractions
//
$english-nth-by-number: (
  1: 'whole',
  2: 'half',
  3: 'third',
  4: 'fourth',
  5: 'fifth',
  6: 'sixth',
  7: 'seventh',
  8: 'eighth',
  9: 'ninth',
  10: 'tenth',
  11: 'eleventh',
  12: 'twelfth',
);

// Euclid's Algorithm to find GCD of Fraction
// used to determine if a fraction can be reduced
//
// first, this assumes that $b > $a and they are non zero.
// It will always be so in our
// case - so we're not going to add conditionals to check for this

@function gcd($a, $b) {
  @if ($b == 0) {
    @return $a;
  } @else {
    $remainder: $a%$b;
    @return gcd($b, $remainder);
  }
}

// Mixin to return easy-to-read width class from 2 numbers
// Accepts a $numerator, $denominator, and optional breakpoint
//
@mixin easy-to-read-width($numerator, $denominator, $breakpoint: '') {
  // Define optional prefix
  //
  $breakpoint-prefix: '.';
  @if ($breakpoint != 'n') {
    @if map-has-key($widths__number-of-divisions-at-breakpoint, $breakpoint) {
      $breakpoint-prefix: '.#{unquote($breakpoint)}-';
    }
  }

  // Define english and delimiter '-' for first part of class
  //
  $width-first-part: '#{map-get($english-by-number, $numerator)}-';

  // Define english nth for second part
  //
  $width-second-part: '#{map-get($english-nth-by-number, $denominator)}';
  @if ($numerator > 1) {
    $width-second-part: '#{$width-second-part}s';
  }
  @if ($width-second-part == 'halfs') {
    $width-second-part: 'halves';
  }

  // Here's the class
  // Return the class based on settings defined above
  //
  // If $widths__generate-all-100-percent-widths is false and $numerator/$denominator = 1. Only do this
  // for denominators above 1 so we still get .one-whole
  //
  @if (
    $widths__generate-all-100-percent-widths !=
      true and
      $numerator/$denominator ==
      1 and
      $denominator >
      1
  ) {
    // We don't return the width in this situation
  }
  // If $widths__generate-common-denominator-widths is false
  //
  @else if
    (
      $widths__generate-common-denominator-widths !=
        true and
        gcd($numerator, $denominator) >
        1
    )
  {
    // We don't return the width in this situation
  } @else {
    #{$breakpoint-prefix}#{$width-first-part}#{$width-second-part} {
      width: ($numerator/$denominator) * 100%;
    }
  }
}

// Loop through all breakpoints in $widths__number-of-divisions-at-breakpoint
@each $breakpoint, $num-divisions in $widths__number-of-divisions-at-breakpoint
{
  @if ($num-divisions > 0) {
    @if ($breakpoint != 'n') {
      @include bp-at-least(map-get($breakpoints, $breakpoint)) {
        @for $i from 1 through $num-divisions {
          @for $j from 1 through $i {
            @include easy-to-read-width($j, $i, $breakpoint);
          }
        }
      }
    } @else {
      @for $i from 1 through $num-divisions {
        @for $j from 1 through $i {
          @include easy-to-read-width($j, $i, $breakpoint);
        }
      }
    }
  }
}

/* UPS */

// Ups configuration
// Define the number of ups you want to use at each
// breakpoint. The breakpoints below match the values that
// you defined in base/_vars.scss
//
$ups__number-of-ups-at-breakpoint: (
  n: 12,
  xs: 12,
  sm: 12,
  md: 12,
  lg: 12,
  xl: 12,
  xxl: 12,
);

// Mixin to return easy-to-read up class from 2 numbers
// Accepts a $numerator, $denominator, and optional breakpoint
//
@mixin easy-to-read-up($n, $breakpoint: '') {
  // Define optional prefix
  //
  $breakpoint-prefix: '.';
  @if ($breakpoint != 'n') {
    @if map-has-key($ups__number-of-ups-at-breakpoint, $breakpoint) {
      $breakpoint-prefix: '.#{unquote($breakpoint)}-';
    }
  }

  // Define english and delimiter '-' for first part of class
  //
  $up-first-part: '#{map-get($english-by-number, $n)}-';

  // Here's the class
  #{$breakpoint-prefix}#{$up-first-part}up > * {
    width: (100 / $n) * 1%;
  }
}

// Loop through all breakpoints in $ups__number-of-ups-at-breakpoint
@each $breakpoint, $num-ups in $ups__number-of-ups-at-breakpoint {
  @if ($num-ups > 0) {
    @if ($breakpoint != 'n') {
      @include bp-at-least(map-get($breakpoints, $breakpoint)) {
        @for $i from 1 through $num-ups {
          @include easy-to-read-up($i, $breakpoint);
        }
      }
    } @else {
      @for $i from 1 through $num-ups {
        @include easy-to-read-up($i, $breakpoint);
      }
    }
  }
}
